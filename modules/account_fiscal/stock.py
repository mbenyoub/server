# -*- encoding: utf-8 -*-
###########################################################################
#    Module Writen to OpenERP, Open Source Management Solution
#
#    Copyright (c) 2013 Akkadian - http://www.akkadian.com.mx/
#    All Rights Reserved.
#    info Akkadian
############################################################################
#    Coded by: 
#              Roberto Ivan Serrano Salda√±a (riss_600@hotmail.com)
#
############################################################################
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import time
from openerp import pooler
from openerp.osv import fields, osv
import openerp.addons.decimal_precision as dp
from openerp import netsvc

#----------------------------------------------------------
# Stock Picking
#----------------------------------------------------------
class stock_picking(osv.Model):
    _inherit = "stock.picking"
    _table = "stock_picking"
    _description = "Picking List"
    
    def _compute_lines(self, cr, uid, ids, field_name, arg, context=None):
        """
            Busca los movimientos relacionados con el albaran
        """
        result = {}
        #print "************* ids *********** ", ids
        for picking in self.browse(cr, uid, ids, context=context):
            lines = []
            reference = 'stock.picking,%s'%(picking.id,)
            
            lines = self.pool.get('account.move').search(cr, uid, [('reference','=',reference)])
            #print "*************** lines ******************* ", lines
            result[picking.id] = lines
        return result
    
    _columns = {
        'move_ids': fields.function(_compute_lines, relation='account.move', type="many2many", store=False, string='Movimientos'),
        'invoice_id': fields.many2one('account.invoice', 'Factura', ondelete='set null', select=True),
    }
    
    _defaults = {
        'invoice_id': False
    }
    
    def _prepare_invoice(self, cr, uid, picking, partner, inv_type, journal_id, context=None):
        """ Inherit the original function of the 'stock' module in order to override some
            values if the picking has been generated by a purchase order
        """
        link_obj = self.pool.get('links.get.request')
        invoice_vals = super(stock_picking, self)._prepare_invoice(cr, uid, picking, partner, inv_type, journal_id, context=context)
        
        #~ Valida que el objeto se encuentre en las referencias
        link_obj.validate_link(cr, uid, 'stock.picking', 'Almacen', context=None)
        link_obj.validate_link(cr, uid, 'purchase.order', 'Almacen', context=None)
        
        # Hacer que provenga de el pedido de venta
        if picking.purchase_id:
            invoice_vals['ref'] = 'purchase.order,%s'%(picking.purchase_id.id,)
        if picking.sale_id:
            invoice_vals['ref'] = 'stock.picking,%s'%(picking.id,)
        return invoice_vals

    def get_currency_id(self, cursor, user, picking):
        if picking.invoice_id:
            return picking.invoice_id.currency_id.id
        else:
            return super(stock_picking, self).get_currency_id(cursor, user, picking)

stock_picking()

class stock_picking_in(osv.Model):
    _inherit = "stock.picking.in"
    _table = "stock_picking"
    _description = "Incoming Shipments"
    
    def _compute_lines(self, cr, uid, ids, field_name, arg, context=None):
        """
            Busca los movimientos relacionados con el albaran
        """
        result = {}
        #print "************* ids *********** ", ids
        for picking in self.browse(cr, uid, ids, context=context):
            lines = []
            reference = 'stock.picking,%s'%(picking.id,)
            
            lines = self.pool.get('account.move').search(cr, uid, [('reference','=',reference)])
            #print "*************** lines ******************* ", lines
            result[picking.id] = lines
        return result
    
    _columns = {
        'move_ids': fields.function(_compute_lines, relation='account.move', type="many2many", store=False, string='Movimientos'),
        'invoice_id': fields.many2one('account.invoice', 'Factura', ondelete='set null', select=True),
    }

stock_picking_in()

class stock_picking_out(osv.Model):
    _inherit = "stock.picking.out"
    _table = "stock_picking"
    _description = "Incoming Shipments"
    
    def _compute_lines(self, cr, uid, ids, field_name, arg, context=None):
        """
            Busca los movimientos relacionados con el albaran
        """
        result = {}
        #print "************* ids *********** ", ids
        for picking in self.browse(cr, uid, ids, context=context):
            lines = []
            reference = 'stock.picking,%s'%(picking.id,)
            
            lines = self.pool.get('account.move').search(cr, uid, [('reference','=',reference)])
            #print "*************** lines ******************* ", lines
            result[picking.id] = lines
        return result
    
    _columns = {
        'move_ids': fields.function(_compute_lines, relation='account.move', type="many2many", store=False, string='Movimientos'),
        'invoice_id': fields.many2one('account.invoice', 'Factura', ondelete='set null', select=True),
    }

stock_picking_out()

#----------------------------------------------------------
# Movimientos de Stock
#----------------------------------------------------------
class stock_move(osv.osv):
    _inherit = 'stock.move'
    
    _columns = {
        'invoice_line_id': fields.many2one('account.invoice.line', 'Linea Factura', ondelete='set null', select=True, readonly=True),
    }
    
    def _create_product_valuation_moves(self, cr, uid, move, context=None):
        """
        Generate the appropriate accounting moves if the product being moves is subject
        to real_time valuation tracking, and the source or destination location is
        a transit location or is outside of the company.
        """
        if move.product_id.valuation == 'real_time': # FIXME: product valuation should perhaps be a property?
            if context is None:
                context = {}
            src_company_ctx = dict(context,force_company=move.location_id.company_id.id)
            dest_company_ctx = dict(context,force_company=move.location_dest_id.company_id.id)
            account_moves = []
            # Outgoing moves (or cross-company output part)
            if move.location_id.company_id \
                and (move.location_id.usage == 'internal' and move.location_dest_id.usage != 'internal'\
                     or move.location_id.company_id != move.location_dest_id.company_id):
                journal_id, acc_src, acc_dest, acc_valuation = self._get_accounting_data_for_valuation(cr, uid, move, src_company_ctx)
                reference_amount, reference_currency_id = self._get_reference_accounting_values_for_valuation(cr, uid, move, src_company_ctx)
                #returning goods to supplier
                if move.location_dest_id.usage == 'supplier':
                    account_moves += [(journal_id, self._create_account_move_line(cr, uid, move, acc_valuation, acc_src, reference_amount, reference_currency_id, context))]
                else:
                    account_moves += [(journal_id, self._create_account_move_line(cr, uid, move, acc_valuation, acc_dest, reference_amount, reference_currency_id, context))]

            # Incoming moves (or cross-company input part)
            if move.location_dest_id.company_id \
                and (move.location_id.usage != 'internal' and move.location_dest_id.usage == 'internal'\
                     or move.location_id.company_id != move.location_dest_id.company_id):
                journal_id, acc_src, acc_dest, acc_valuation = self._get_accounting_data_for_valuation(cr, uid, move, dest_company_ctx)
                reference_amount, reference_currency_id = self._get_reference_accounting_values_for_valuation(cr, uid, move, src_company_ctx)
                #goods return from customer
                if move.location_id.usage == 'customer':
                    account_moves += [(journal_id, self._create_account_move_line(cr, uid, move, acc_dest, acc_valuation, reference_amount, reference_currency_id, context))]
                else:
                    account_moves += [(journal_id, self._create_account_move_line(cr, uid, move, acc_src, acc_valuation, reference_amount, reference_currency_id, context))]
            
            reference = ''
            if move.picking_id:
                link_obj = self.pool.get('links.get.request')
                #~ Valida que el objeto account.invoice se encuentre en las referencias
                link_obj.validate_link(cr, uid, 'stock.picking', 'Almacen', context=None)
                # Obtiene el valor referenciado para redireccionar al albaran de entrada/salida
                reference = 'stock.picking,%s'%(move.picking_id.id)
            move_obj = self.pool.get('account.move')
            for j_id, move_lines in account_moves:
                move_obj.create(cr, uid,
                        {
                         'journal_id': j_id,
                         'line_id': move_lines,
                         'ref': move.picking_id and move.picking_id.name,
                         'reference': reference})
    
stock_move()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
